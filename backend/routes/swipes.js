const express = require('express');
const auth = require('../middleware/auth');
const User = require('../models/User');
const Match = require('../models/Match');

const router = express.Router();

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–∞–π–ø–Ω—É–ª –≤–ø—Ä–∞–≤–æ (–ª–∞–π–∫)
router.post('/like/:targetUserId', auth, async (req, res) => {
  const { targetUserId } = req.params;
  const currentUserId = req.user.userId;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∞–π–∫–∞–ª –ª–∏ targetUser —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingMatch = await Match.findOne({
      $or: [
        { user1: currentUserId, user2: targetUserId },
        { user1: targetUserId, user2: currentUserId }
      ]
    });

    if (existingMatch) {
      return res.status(400).json({ msg: '–£–∂–µ –µ—Å—Ç—å Match!' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–∞–ª –ª–∏ targetUser —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const reverseLike = await Match.findOne({
      $or: [
        { user1: targetUserId, user2: currentUserId }
      ]
    });

    if (reverseLike) {
      // –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ ‚Üí —Å–æ–∑–¥–∞–µ–º Match
      const match = new Match({ user1: currentUserId, user2: targetUserId });
      await match.save();
      return res.json({ match: true, msg: 'üéâ Match!' });
    } else {
      // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ (–º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Swipe, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º)
      return res.json({ match: false, msg: '–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
    }

  } catch (err) {
    console.error(err.message);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

module.exports = router;